/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SigninImport } from './routes/signin'
import { Route as MypageImport } from './routes/mypage'
import { Route as LoginImport } from './routes/login'
import { Route as CurationMapsImport } from './routes/curation-maps'
import { Route as CurationCreateImport } from './routes/curation-create'
import { Route as IndexImport } from './routes/index'
import { Route as CurationMapsIdImport } from './routes/curation-maps/$id'

// Create/Update Routes

const SigninRoute = SigninImport.update({
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any)

const MypageRoute = MypageImport.update({
  path: '/mypage',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const CurationMapsRoute = CurationMapsImport.update({
  path: '/curation-maps',
  getParentRoute: () => rootRoute,
} as any)

const CurationCreateRoute = CurationCreateImport.update({
  path: '/curation-create',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CurationMapsIdRoute = CurationMapsIdImport.update({
  path: '/$id',
  getParentRoute: () => CurationMapsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/curation-create': {
      id: '/curation-create'
      path: '/curation-create'
      fullPath: '/curation-create'
      preLoaderRoute: typeof CurationCreateImport
      parentRoute: typeof rootRoute
    }
    '/curation-maps': {
      id: '/curation-maps'
      path: '/curation-maps'
      fullPath: '/curation-maps'
      preLoaderRoute: typeof CurationMapsImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/mypage': {
      id: '/mypage'
      path: '/mypage'
      fullPath: '/mypage'
      preLoaderRoute: typeof MypageImport
      parentRoute: typeof rootRoute
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninImport
      parentRoute: typeof rootRoute
    }
    '/curation-maps/$id': {
      id: '/curation-maps/$id'
      path: '/$id'
      fullPath: '/curation-maps/$id'
      preLoaderRoute: typeof CurationMapsIdImport
      parentRoute: typeof CurationMapsImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  CurationCreateRoute,
  CurationMapsRoute: CurationMapsRoute.addChildren({ CurationMapsIdRoute }),
  LoginRoute,
  MypageRoute,
  SigninRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/curation-create",
        "/curation-maps",
        "/login",
        "/mypage",
        "/signin"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/curation-create": {
      "filePath": "curation-create.tsx"
    },
    "/curation-maps": {
      "filePath": "curation-maps.tsx",
      "children": [
        "/curation-maps/$id"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/mypage": {
      "filePath": "mypage.tsx"
    },
    "/signin": {
      "filePath": "signin.tsx"
    },
    "/curation-maps/$id": {
      "filePath": "curation-maps/$id.tsx",
      "parent": "/curation-maps"
    }
  }
}
ROUTE_MANIFEST_END */
