/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/{curationId}/like": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 인증된 사용자가 큐레이션에 좋아요
         * @description 인증된 사용자가 큐레이션에 좋아요를 합니다.
         */
        post: operations["likeSave"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sign-up": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 회원가입
         * @description 자체 회원가입
         */
        post: operations["userSignUp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sign-in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 로그인
         * @description 자체 로그인
         */
        post: operations["userSignIn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/location/{curationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 인증된 사용자가 위치 생성
         * @description 인증된 사용자가 위치를 생성(큐레이션 id, 위치 이름, 이미지)합니다.
         */
        post: operations["locationSave"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/curation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 모든 사용자가 큐레이션 6개씩 조회
         * @description 모든 사용자가 산책로 지도 페이지에서 큐레이션을 한 페이지 당 6개씩 조회합니다.
         */
        get: operations["curationFindAll"];
        put?: never;
        /**
         * 인증된 사용자가 큐레이션 생성
         * @description 인증된 사용자가 산책로 생성 페이지에서 큐레이션을 생성합니다.
         */
        post: operations["curationSave"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/location/{locationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 인증된 사용자가 위치 삭제
         * @description 인증된 사용자가 위치를 삭제합니다.
         */
        delete: operations["locationDelete"];
        options?: never;
        head?: never;
        /**
         * 인증된 사용자가 위치 수정
         * @description 인증된 사용자가 위치를 수정(위치 이름, 이미지)합니다.
         */
        patch: operations["locationUpdate"];
        trace?: never;
    };
    "/curation/{curationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 인증된 사용자가 큐레이션 삭제
         * @description 인증된 사용자가 큐레이션을 삭제합니다.
         */
        delete: operations["curationDelete"];
        options?: never;
        head?: never;
        /**
         * 인증된 사용자가 큐레이션 수정
         * @description 인증된 사용자가 산책로 지도 페이지에서 큐레이션을 수정(큐레이션 제목, 설명)합니다.
         */
        patch: operations["curationUpdate"];
        trace?: never;
    };
    "/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Test"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["profile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/login/oauth2/code/google": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 구글 로그인
         * @description 구글 로그인
         */
        get: operations["googleCallback"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 인증된 사용자가 고른 위치 조회
         * @description 인증된 사용자가 고른 위치를 조회합니다.
         */
        get: operations["locationFindAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/curation/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 모든 사용자가 큐레이션 검색
         * @description 모든 사용자가 산책로 지도 페이지에서 큐레이션을 검색합니다.
         */
        get: operations["searchCurations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/curation/recent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 모든 사용자가 최신순으로 정렬된 큐레이션 6개 조회
         * @description 모든 사용자가 랜딩페이지에서 최신순으로 정렬된 6개의 큐레이션을 조회합니다.
         */
        get: operations["findTop6byOrderByCreateDateDesc"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/curation/popular": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 모든 사용자가 좋아요 순으로 정렬된 큐레이션 6개 조회
         * @description 모든 사용자가 랜딩페이지에서 좋아요 순으로 정렬된 6개의 큐레이션을 조회합니다.
         */
        get: operations["findTop6ByOrderByLikeCountDesc"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{curationId}/unlike": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 인증된 사용자가 큐레이션에 좋아요 취소
         * @description 인증된 사용자가 큐레이션에 좋아요를 취소합니다.
         */
        delete: operations["likeDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ApiResponseTemplate: {
            status?: string;
            message?: string;
            data?: Record<string, never>;
        };
        ApiResponseTemplateSuccessCode: {
            status?: string;
            message?: string;
            /** @enum {string} */
            data?: "GET_SUCCESS" | "LOCATION_UPDATE_SUCCESS" | "CURATION_UPDATE_SUCCESS" | "LOCATION_DELETE_SUCCESS" | "CURATION_DELETE_SUCCESS" | "LIKE_DELETE_SUCCESS" | "USER_SIGNUP_SUCCESS" | "USER_LOGIN_SUCCESS" | "LOCATION_SAVE_SUCCESS" | "CURATION_SAVE_SUCCESS" | "LIKE_SAVE_SUCCESS";
        };
        UserSignUpReqDto: {
            name: string;
            email: string;
            password: string;
            accessToken?: string;
            refreshToken?: string;
            /** @enum {string} */
            role?: "ROLE_USER";
        };
        ApiResponseTemplateString: {
            status?: string;
            message?: string;
            data?: string;
        };
        UserSignInReqDto: {
            email: string;
            password: string;
            accessToken?: string;
            refreshToken?: string;
        };
        ApiResponseTemplateUserSignInResDto: {
            status?: string;
            message?: string;
            data?: components["schemas"]["UserSignInResDto"];
        };
        UserSignInResDto: {
            name?: string;
            email?: string;
            accessToken?: string;
            refreshToken?: string;
        };
        LocationSaveReqDto: {
            name?: string;
            description?: string;
            address?: string;
        };
        ApiResponseTemplateLocationInfoResDto: {
            status?: string;
            message?: string;
            data?: components["schemas"]["LocationInfoResDto"];
        };
        LocationInfoResDto: {
            /** Format: int64 */
            locationId?: number;
            /** Format: int64 */
            curationId?: number;
            name?: string;
            description?: string;
            address?: string;
            locationImage?: string;
        };
        CurationSaveReqDto: {
            name?: string;
            content?: string;
        };
        ApiResponseTemplateCurationInfoResDto: {
            status?: string;
            message?: string;
            data?: components["schemas"]["CurationInfoResDto"];
        };
        CurationInfoResDto: {
            /** Format: int64 */
            id?: number;
            name?: string;
            content?: string;
            /** Format: date-time */
            createDate?: string;
            /** Format: int32 */
            likeCount?: number;
        };
        LocationUpdateReqDto: {
            name?: string;
            description?: string;
            address?: string;
        };
        CurationUpdateReqDto: {
            name?: string;
            content?: string;
        };
        GoogleToken: {
            accessToken?: string;
        };
        ApiResponseTemplateLocationListResDto: {
            status?: string;
            message?: string;
            data?: components["schemas"]["LocationListResDto"];
        };
        LocationListResDto: {
            locations?: components["schemas"]["LocationInfoResDto"][];
        };
        ApiResponseTemplateCurationListResDto: {
            status?: string;
            message?: string;
            data?: components["schemas"]["CurationListResDto"];
        };
        CurationListResDto: {
            curations?: components["schemas"]["CurationInfoResDto"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    likeSave: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                curationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 응답 생성에 성공하였습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateSuccessCode"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateSuccessCode"];
                };
            };
            /** @description 인증이 필요합니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateSuccessCode"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplate"];
                };
            };
        };
    };
    userSignUp: {
        parameters: {
            query: {
                email: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserSignUpReqDto"];
            };
        };
        responses: {
            /** @description 응답 생성에 성공하였습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateString"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateString"];
                };
            };
            /** @description 인증이 필요합니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateString"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplate"];
                };
            };
        };
    };
    userSignIn: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserSignInReqDto"];
            };
        };
        responses: {
            /** @description 응답 생성에 성공하였습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateUserSignInResDto"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateUserSignInResDto"];
                };
            };
            /** @description 인증이 필요합니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateUserSignInResDto"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplate"];
                };
            };
        };
    };
    locationSave: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                curationId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    location: components["schemas"]["LocationSaveReqDto"];
                    /** Format: binary */
                    locationImage: string;
                };
            };
        };
        responses: {
            /** @description 응답 생성에 성공하였습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateLocationInfoResDto"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateLocationInfoResDto"];
                };
            };
            /** @description 인증이 필요합니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateLocationInfoResDto"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplate"];
                };
            };
        };
    };
    curationFindAll: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 응답 생성에 성공하였습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateCurationListResDto"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateCurationListResDto"];
                };
            };
            /** @description 서버 내부 오류입니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplate"];
                };
            };
        };
    };
    curationSave: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CurationSaveReqDto"];
            };
        };
        responses: {
            /** @description 응답 생성에 성공하였습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateCurationInfoResDto"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateCurationInfoResDto"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateCurationInfoResDto"];
                };
            };
            /** @description 인증이 필요합니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateCurationInfoResDto"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplate"];
                };
            };
        };
    };
    locationDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                locationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 응답 생성에 성공하였습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateString"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateString"];
                };
            };
            /** @description 인증이 필요합니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateString"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplate"];
                };
            };
        };
    };
    locationUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                locationId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    location: components["schemas"]["LocationUpdateReqDto"];
                    /** Format: binary */
                    locationImage: string;
                };
            };
        };
        responses: {
            /** @description 응답 생성에 성공하였습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateLocationInfoResDto"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateLocationInfoResDto"];
                };
            };
            /** @description 인증이 필요합니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateLocationInfoResDto"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplate"];
                };
            };
        };
    };
    curationDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                curationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 응답 생성에 성공하였습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateSuccessCode"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateSuccessCode"];
                };
            };
            /** @description 인증이 필요합니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateSuccessCode"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplate"];
                };
            };
        };
    };
    curationUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                curationId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CurationUpdateReqDto"];
            };
        };
        responses: {
            /** @description 응답 생성에 성공하였습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateCurationInfoResDto"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateCurationInfoResDto"];
                };
            };
            /** @description 인증이 필요합니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateCurationInfoResDto"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplate"];
                };
            };
        };
    };
    Test: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplate"];
                };
            };
        };
    };
    profile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplate"];
                };
            };
        };
    };
    googleCallback: {
        parameters: {
            query: {
                code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 응답 생성에 성공하였습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GoogleToken"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GoogleToken"];
                };
            };
            /** @description 인증이 필요합니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GoogleToken"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplate"];
                };
            };
        };
    };
    locationFindAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 응답 생성에 성공하였습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateLocationListResDto"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateLocationListResDto"];
                };
            };
            /** @description 인증이 필요합니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateLocationListResDto"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplate"];
                };
            };
        };
    };
    searchCurations: {
        parameters: {
            query: {
                query: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 응답 생성에 성공하였습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateCurationListResDto"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateCurationListResDto"];
                };
            };
            /** @description 서버 내부 오류입니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplate"];
                };
            };
        };
    };
    findTop6byOrderByCreateDateDesc: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 응답 생성에 성공하였습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateCurationListResDto"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateCurationListResDto"];
                };
            };
            /** @description 서버 내부 오류입니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplate"];
                };
            };
        };
    };
    findTop6ByOrderByLikeCountDesc: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 응답 생성에 성공하였습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateCurationListResDto"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateCurationListResDto"];
                };
            };
            /** @description 서버 내부 오류입니다. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplate"];
                };
            };
        };
    };
    likeDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                curationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 응답 생성에 성공하였습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateSuccessCode"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateSuccessCode"];
                };
            };
            /** @description 인증이 필요합니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplateSuccessCode"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTemplate"];
                };
            };
        };
    };
}
